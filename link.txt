{
  "endafter": 10,
  "runagain": 15,
  "steps": [
    {
      "url": "https://chatdon.com/",
      "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
      "script": "(function() {\r\n    console.log('üöÄ Page loaded. Simulating human behavior...');\r\n\r\n    // Simulate slight viewport resizing\r\n    function simulateViewportResize() {\r\n        try {\r\n            window.resizeTo(window.innerWidth - Math.random() * 10, window.innerHeight - Math.random() * 10);\r\n            setTimeout(() => {\r\n                window.resizeTo(window.innerWidth + Math.random() * 10, window.innerHeight + Math.random() * 10);\r\n            }, 1000 + Math.random() * 1500);\r\n        } catch (e) {\r\n            console.warn('Viewport resize failed');\r\n        }\r\n    }\r\n\r\n    // Simulate random mouse movements\r\n    function simulateMouseMove() {\r\n        const event = new MouseEvent('mousemove', {\r\n            clientX: Math.floor(Math.random() * window.innerWidth),\r\n            clientY: Math.floor(Math.random() * window.innerHeight),\r\n            bubbles: true,\r\n            cancelable: true,\r\n            view: window,\r\n        });\r\n        document.dispatchEvent(event);\r\n        console.log('üñ±Ô∏è Simulated mouse movement');\r\n    }\r\n\r\n    // Click 'Accept All' Button\r\n    async function clickAcceptButton() {\r\n        await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1500));\r\n        const acceptButton = document.querySelector('button.cky-btn.cky-btn-accept[data-cky-tag=\"accept-button\"]');\r\n        if (acceptButton) {\r\n            acceptButton.click();\r\n            console.log('‚úÖ Accepted cookies');\r\n        } else {\r\n            console.warn('‚ö†Ô∏è Accept All button not found');\r\n        }\r\n    }\r\n\r\n    // Scroll smoothly like a human\r\n    async function humanScroll(duration) {\r\n        const startTime = Date.now();\r\n        while (Date.now() - startTime < duration) {\r\n            window.scrollBy({\r\n                top: Math.random() * 50 + 30,\r\n                behavior: 'smooth'\r\n            });\r\n            simulateMouseMove();\r\n            await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 400));\r\n        }\r\n        console.log('‚úÖ Scrolling completed');\r\n    }\r\n\r\n    // Click a random blog post and scroll it\r\n    async function clickRandomBlogAndScroll() {\r\n        const blogLinks = Array.from(document.querySelectorAll('a[href*=\"/202\"]'));\r\n        if (blogLinks.length > 0) {\r\n            const randomBlog = blogLinks[Math.floor(Math.random() * blogLinks.length)];\r\n            console.log(`üìå Clicking on blog post: ${randomBlog.href}`);\r\n            randomBlog.click();\r\n            await new Promise(resolve => setTimeout(resolve, 5000 + Math.random() * 2000));\r\n            await humanScroll(5000);\r\n            console.log('‚úÖ Finished blog scrolling');\r\n        } else {\r\n            console.warn('‚ö†Ô∏è No blog posts found');\r\n        }\r\n    }\r\n\r\n    // Random delay simulation\r\n    async function randomIdle(min, max) {\r\n        const idleTime = min + Math.random() * (max - min);\r\n        console.log(`üïí Waiting ${idleTime.toFixed(2)} seconds...`);\r\n        await new Promise(resolve => setTimeout(resolve, idleTime * 1000));\r\n    }\r\n\r\n    // Execute script\r\n    async function executeSteps() {\r\n        console.log('‚è≥ Simulating user actions...');\r\n\r\n        await randomIdle(1, 3);\r\n        simulateViewportResize();\r\n        \r\n        await randomIdle(2, 5);\r\n        await clickAcceptButton();\r\n        \r\n        await randomIdle(2, 4);\r\n        await humanScroll(5000);\r\n        \r\n        await randomIdle(3, 5);\r\n        await clickRandomBlogAndScroll();\r\n        \r\n        console.log('‚úÖ All actions completed');\r\n        return 'completed';\r\n    }\r\n\r\n    executeSteps().catch(err => console.error('‚ùå Error:', err));\r\n})();"
    }
  ]
}
