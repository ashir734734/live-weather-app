{
  "endafter": 1000,
  "runagain": 1555,
  "steps": [
    {
      "url": "https://chatdon.com/",
      "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
      "script": "(function() {\r\n    console.log('\ud83d\ude80 Page loaded. Simulating human behavior...');\r\n\r\n    // Simulate slight viewport resizing to bypass bot detection\r\n    function simulateViewportResize() {\r\n        try {\r\n            window.resizeTo(window.innerWidth - Math.random() * 10, window.innerHeight - Math.random() * 10);\r\n            setTimeout(() => {\r\n                window.resizeTo(window.innerWidth + Math.random() * 10, window.innerHeight + Math.random() * 10);\r\n            }, 1000 + Math.random() * 1500);\r\n        } catch (e) {\r\n            console.warn('Cannot resize viewport.');\r\n        }\r\n    }\r\n\r\n    // Simulate random mouse movements\r\n    function simulateMouseMove() {\r\n        const event = new MouseEvent('mousemove', {\r\n            clientX: Math.floor(Math.random() * window.innerWidth),\r\n            clientY: Math.floor(Math.random() * window.innerHeight),\r\n            bubbles: true,\r\n            cancelable: true,\r\n            view: window,\r\n        });\r\n        document.dispatchEvent(event);\r\n        console.log('\ud83d\uddb1\ufe0f Simulated mouse movement');\r\n    }\r\n\r\n    // Simulate Accept All button click\r\n    async function clickAcceptButton() {\r\n        await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1500)); // Mimic user delay\r\n        const acceptButton = document.querySelector('button.cky-btn.cky-btn-accept[data-cky-tag=\"accept-button\"]');\r\n        if (acceptButton) {\r\n            const rect = acceptButton.getBoundingClientRect();\r\n            const clickEvent = new MouseEvent('click', {\r\n                bubbles: true,\r\n                cancelable: true,\r\n                view: window,\r\n                clientX: rect.left + rect.width / 2,\r\n                clientY: rect.top + rect.height / 2,\r\n            });\r\n            acceptButton.dispatchEvent(clickEvent);\r\n            console.log('\u2705 Accepted cookies after human-like delay');\r\n        } else {\r\n            console.warn('\u26a0\ufe0f Accept All button not found');\r\n        }\r\n    }\r\n\r\n    // Simulate human-like scrolling\r\n    async function humanScroll(duration) {\r\n        console.log(`\ud83d\udcdc Scrolling for ${duration / 1000} seconds...`);\r\n        const startTime = Date.now();\r\n        while (Date.now() - startTime < duration) {\r\n            window.scrollBy({\r\n                top: (Math.random() > 0.5 ? 1 : -1) * (30 + Math.random() * 50),\r\n                behavior: 'smooth'\r\n            });\r\n            simulateMouseMove();\r\n            await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 500)); // Random pause during scrolling\r\n        }\r\n        console.log('\u2705 Scrolling completed');\r\n    }\r\n\r\n    // Simulate random idle (pauses) to mimic human behavior\r\n    async function randomIdle(min, max) {\r\n        const idleTime = min + Math.random() * (max - min);\r\n        console.log(`\u23f3 Taking a short break for ${idleTime.toFixed(2)} seconds...`);\r\n        await new Promise(resolve => setTimeout(resolve, idleTime * 1000));\r\n    }\r\n\r\n    // Execute script\r\n    async function executeSteps() {\r\n        console.log('\u23f3 Simulating user actions...');\r\n\r\n        await randomIdle(1, 3); // Idle before resizing\r\n        simulateViewportResize();\r\n        \r\n        await randomIdle(2, 5); // Idle before clicking\r\n        await clickAcceptButton();\r\n        \r\n        await randomIdle(2, 4); // Idle before scrolling\r\n        await humanScroll(5000);\r\n        \r\n        console.log('\u2705 All actions completed');\r\n        return 'completed';\r\n    }\r\n\r\n    executeSteps().catch(err => console.error('\u274c Error:', err));\r\n})();"
    }
  ]
}
